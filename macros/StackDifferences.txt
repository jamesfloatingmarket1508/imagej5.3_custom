// Measures total absolute pixel intensity differences
// between all images in stack and reference image (or
// mean of a number of consecutive images) with an ROI.
//

//setBatchMode(true);
  close("Avg");
  close("Diff");
  if (nImages==0)
    run("Image Sequence...");
  if (nSlices<2) exit("This macro requires a stack.");
  rename("Stack");
  im1 = 1;
  im2 = 1;
  Dialog.create("Reference image range in stack");
  Dialog.addNumber("First image", im1);
  Dialog.addNumber("Last image", im2);
  Dialog.show();
  im1 = Dialog.getNumber();
  im2 = Dialog.getNumber();
  im1 = minOf(maxOf(floor(im1), 1), nSlices);
  im2 = minOf(maxOf(floor(im2), 1), nSlices);
  if (im1>im2) {
    if (im2==1)
      im2 = im1;
    i = im2;
    im2 = im1;
    im1 = i;
  }
  x = 0;
  y = 0;
  w = getWidth-1;
  h = getHeight-1;
  if (selectionType()!=-1) {
    run("To Bounding Box");	// make rectangular
    Roi.getBounds(x, y, w, h);
  }
  run("Select None");
  // calculate mean reference image
  run("Make Substack...", "  slices="+im1+"-"+im2);
  rename("Substack");
  if (im1==im2) {
    run("Add Slice");
    setSlice(1);
    run("Copy");
    setSlice(2);
    run("Paste");  
  }
  run("Z Project...", "projection=[Average Intensity]");
  rename("Avg");
  selectWindow("Substack");
  close();
  // calculate differences
  imageCalculator("Difference create stack", "Stack", "Avg");
  selectWindow("Result of Stack");
  rename("Diff");
  makeRectangle(x, y, w, h);
  run("Plot Z-axis Profile");
  Plot.getValues(time, zd);
  run("Close");
  if (isOpen("Results")) { 
    selectWindow("Results"); 
    run("Close"); 
  } 
  
  // calculate minimum of non-reference image profile values
  zmin = 99999;
  for (i=0; i<time.length; i++) {
    if ((i>=im1) && (i<=im2)) {
      if (zd[i]<zmin)
        zmin = zd[i];
    }
  }
  // subtract from profile
  zdc = Array.copy(zd);
  for (i=0; i<time.length; i++) {
    if ((i<im1-1) || (i>im2-1))
      zdc[i] = zdc[i] - zmin;
  }
  // output final profile to results table
  irow = 0;
  for (i=0; i<time.length; i++) {
    setResult("Value", irow, zd[i]);
    setResult("Value (corrected)", irow, zdc[i]);
    irow++;
  }
  updateResults();
  Plot.create("Contraction profile", "Time", "Value", time, zdc);
  